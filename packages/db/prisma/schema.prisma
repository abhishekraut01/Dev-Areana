generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String            @id @default(uuid())
  email                   String            @unique
  role                    Role
  createdAt               DateTime
  updatedAt               DateTime
}

enum Role {
  User
  Admin
}

model Challenge {
  id                                  String                        @id @default(uuid())
  title                               String
  notionDocId                         String                        @unique
  maxPoints                           Int
  contestToChallengeMapping           ContestToChallengeMapping[]
  createdAt                           DateTime
  updatedAt                           DateTime
}

model Contest {
  id                                  String             @id @default(uuid())
  title                               String
  startTime                           DateTime
  contestToChallengeMapping           ContestToChallengeMapping[]
  createdAt                           DateTime
  updatedAt                           DateTime
}

model ContestToChallengeMapping{
  id                                   String             @id @default(uuid())
  contestId                            String
  challengeId                          String
  index                                Int
  challenge                            Challenge          @relation(fields: [challengeId] , references: [id])
  contest                              Contest            @relation(fields: [contestId] , references: [id])
  @@unique([contestId , challengeId]) //if one challenge is appread in the contest abc the same challenge should not appear twice
}

model Submission {
  id                                   String             @id @default(uuid())
  contestId                            String
  challengeId                          String
  createdAt                            DateTime
}
